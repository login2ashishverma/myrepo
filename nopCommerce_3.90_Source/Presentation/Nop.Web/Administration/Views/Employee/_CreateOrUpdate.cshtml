@model EmployeeModel
@using Nop.Admin.Models.Employees
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)

<script>
    $(document).ready(function() {
        bindBootstrapTabSelectEvent('vendor-edit');
    });

   
</script>

<div class="content">
    <div class="form-horizontal">
        <div class="row">
            <div class="col-md-12 clearfix">
                <div class="pull-left">
                    @*@Html.Action("Mode", "Setting", new { modeName = "vendor-advanced-mode" })*@
                </div>
            </div>
        </div>
        <div id="vendor-edit" class="nav-tabs-custom">
            <ul class="nav nav-tabs">
                @Html.RenderBootstrapTabHeader("tab-info", @T("Admin.Employees.Info"), true)
                @Html.RenderBootstrapTabHeader("tab-bankdetails", @T("Admin.Employees.BankDetails"))
                @if (Model.Id > 0)
                {
                    @Html.RenderBootstrapTabHeader("tab-Employees-Address", @T("Admin.Employees-EmployeeAddress"))
                }
            </ul>
            <div class="tab-content">
                @Html.RenderBootstrapTabContent("tab-info", @TabInfo(), true)
                @Html.RenderBootstrapTabContent("tab-bankdetails", @TabBankDetails())
                @if (Model.Id > 0)
                {
                    @Html.RenderBootstrapTabContent("tab-Employees-Address", @TabEmployeeAddress())
                }
            </div>
        </div>
    </div>
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "vendor-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab name*@
<input type="hidden" id="selected-tab-name" name="selected-tab-name" value="@(Html.GetSelectedTabName())">

@helper TabInfo()
{
    @*<script type="text/javascript">
        $(document).ready(function() {
            $("#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)").click(togglePageSize);
            togglePageSize();
        });

        function togglePageSize() {
            if ($('#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)').is(':checked')) {
                $('#pnlPageSize').hide();
                $('#pnlPageSizeOptions').show();
            } else {
                $('#pnlPageSize').show();
                $('#pnlPageSizeOptions').hide();
            }
        }
    </script>*@

    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-body">
                      <div>
                          <div class="form-group">
                              <div class="col-md-3">
                                  @Html.NopLabelFor(model => model.Name)
                              </div>
                              <div class="col-md-9">
                                  @Html.NopEditorFor(model => model.Name, required: true)
                                  @Html.ValidationMessageFor(model => model.Name)
                              </div>
                          </div>
                          <div class="form-group">
                              <div class="col-md-3">
                                  @Html.NopLabelFor(model => model.DateOFBirth)
                              </div>
                              <div class="col-md-9">
                                  @Html.NopEditorFor(model => model.DateOFBirth)
                                  @Html.ValidationMessageFor(model => model.DateOFBirth)
                              </div>
                          </div>

                          <div class="form-group">
                              <div class="col-md-3">
                                  @Html.NopLabelFor(model => model.Gender)
                              </div>
                              <div class="col-md-9">
                                  <div class="raw">
                                      <div class="col-md-1">
                                          <div class="radio">
                                              <label>
                                                  @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "Gender_Male" })
                                                  @T("Admin.Customers.Customers.Fields.Gender.Male")
                                              </label>
                                          </div>
                                      </div>
                                      <div class="col-md-11">
                                          <div class="radio">
                                              <label>
                                                  @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "Gender_Female" })
                                                  @T("Admin.Customers.Customers.Fields.Gender.Female")
                                              </label>
                                          </div>
                                      </div>
                                  </div>
                              </div>
                          </div>
                      </div>
                      
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.EmailId)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.EmailId, required: true)
                        @Html.ValidationMessageFor(model => model.EmailId)
                    </div>
                </div>
               
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.Active)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.Active)
                        @Html.ValidationMessageFor(model => model.Active)
                    </div>
                </div>
                
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.Designation)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.Designation)
                        @Html.ValidationMessageFor(model => model.Designation)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.PanNumber)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(x => x.PanNumber)
                        @Html.ValidationMessageFor(model => model.PanNumber)
                    </div>
                </div>
                <div class="form-group advanced-setting">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.PhoneNumber)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(x => x.PhoneNumber)
                        @Html.ValidationMessageFor(model => model.PhoneNumber)
                    </div>
                </div>
                
            </div>
        </div>
        
    </div>
}

@helper TabBankDetails()
{
    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-body">
              
                <div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.BankName)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(x => x.BankName)
                            @Html.ValidationMessageFor(model => model.BankName)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.BrachAddress)
                        </div>
                        <div class="col-md-9">
                            @Html.NopTextAreaFor(x => x.BrachAddress)
                            @Html.ValidationMessageFor(model => model.BrachAddress)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.AccountNumber)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(x => x.AccountNumber)
                            @Html.ValidationMessageFor(model => model.AccountNumber)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.SwitchCode)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(x => x.SwitchCode)
                            @Html.ValidationMessageFor(model => model.SwitchCode)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.IfscCode)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(x => x.IfscCode)
                            @Html.ValidationMessageFor(model => model.IfscCode)
                        </div>
                    </div>
                    
                </div>
            </div>
        </div>
    </div>
}

@helper TabEmployeeAddress()
{
    
    <div class="panel panel-default">
            <div class="panel-heading">
                @T("Admin.Vendors.Address")
            </div>
            <div class="panel-body">
                @Html.EditorFor(model => model.Address, "Address")
            </div>
        </div>
    @*<div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-body">
                <div id="vendornotes-grid"></div>

                <script>
                    $(document).ready(function() {
                        $("#vendornotes-grid").kendoGrid({
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url:
                                            "@Html.Raw(Url.Action("VendorNotesSelect", "Vendor", new {vendorId = Model.Id}))",
                                        type: "POST",
                                        dataType: "json",
                                        data: addAntiForgeryToken
                                    },
                                    destroy: {
                                        url:
                                            "@Html.Raw(Url.Action("VendorNoteDelete", "Vendor", new {vendorId = Model.Id}))",
                                        type: "POST",
                                        dataType: "json",
                                        data: addAntiForgeryToken
                                    }
                                },
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors",
                                    model: {
                                        id: "Id",
                                        fields: {
                                            //do not implicitly specify all fields
                                            //we do it only for fields which implicitly require it
                                            //otherwise, they'll be formatted wrong way
                                            CreatedOn: { type: "date" }
                                        }
                                    }
                                },
                                error: function(e) {
                                    display_kendoui_grid_error(e);
                                    // Cancel the changes
                                    this.cancelChanges();
                                },
                                serverPaging: true,
                                serverFiltering: true,
                                serverSorting: true
                            },
                            pageable: {
                                refresh: true,
                                numeric: false,
                                previousNext: false,
                                info: false,
                                @Html.Partial("_GridPagerMessages")
                            },
                            editable: {
                                confirmation: "@T("Admin.Common.DeleteConfirmation")",
                                mode: "inline"
                            },
                            scrollable: false,
                            columns: [
                                {
                                    field: "CreatedOn",
                                    title: "@T("Admin.Vendors.VendorNotes.Fields.CreatedOn")",
                                    width: 200,
                                    type: "date",
                                    format: "{0:G}"
                                }, {
                                    field: "Note",
                                    title: "@T("Admin.Vendors.VendorNotes.Fields.Note")",
                                    encoded: false
                                }, {
                                    command: { name: "destroy", text: "@T("Admin.Common.Delete")" },
                                    title: "@T("Admin.Common.Delete")",
                                    width: 100
                                }
                            ]
                        });
                    });
                </script>
            </div>
        </div>

        <div class="panel panel-default">
            <div class="panel-heading">
                @T("Admin.Vendors.VendorNotes.AddTitle")
            </div>
            <div class="panel-body">
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.AddVendorNoteMessage)
                    </div>
                    <div class="col-md-9">
                        @Html.NopTextAreaFor(model => model.AddVendorNoteMessage)
                        @Html.ValidationMessageFor(model => model.AddVendorNoteMessage)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-9 col-md-offset-3">
                        <button type="button" id="addVendorNote" class="btn btn-primary">@T("Admin.Vendors.VendorNotes.AddButton")</button>
                    </div>
                </div>
            </div>
        </div>
    </div>*@

    
}
